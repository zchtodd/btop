{"version":3,"sources":["Gauge.js","CPUGrid.js","Utility.js","Meter.js","ProcessList.js","App.js","serviceWorker.js","index.js"],"names":["Gauge","react_default","a","createElement","viewBox","className","x","y","this","props","cpu_num","cx","cy","r","stroke-dashoffset","perc","text-anchor","toFixed","React","Component","CPUGrid","createGrid","grid","i","Math","ceil","_this","cpus","length","row","j","index","push","Gauge_Gauge","memfmt","n","Meter","label","style","width","text-align","utilized","capacity","ProcessList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gridOptions","getRowNodeId","data","pid","defaultColDef","filter","sortable","columnDefs","headerName","field","maxWidth","valueGetter","params","memory_info","valueFormatter","value","cellStyle","textAlign","gridApi","updateRowData","add","update","remove","sizeColumnsToFit","api","height","main","onGridReady","bind","App","mem","used","total","swp","_this2","WebSocket","window","location","hostname","onmessage","event","JSON","parse","setState","cpu","id","CPUGrid_CPUGrid","Meter_Meter","ProcessList_ProcessList","Boolean","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5554699e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Gauge.css\";\n\nexport default class Gauge extends React.Component {\n    render() {\n        return (\n            <div>\n                <svg viewBox=\"0 0 100 100\" className=\"gauge\">\n                    <text x=\"4\" y=\"50\" className=\"gauge-text\">\n                        {this.props.cpu_num}\n                    </text>\n                    <circle\n                        cx=\"50\"\n                        cy=\"100\"\n                        r=\"45\"\n                        className=\"gauge-capacity\"\n                    />\n                    <circle\n                        cx=\"50\"\n                        cy=\"100\"\n                        r=\"45\"\n                        className=\"gauge-utilized\"\n                        stroke-dashoffset={142 - (141 * this.props.perc) / 100}\n                    />\n                    <text\n                        x=\"50\"\n                        y=\"90\"\n                        text-anchor=\"middle\"\n                        className=\"gauge-text\"\n                    >\n                        {this.props.perc.toFixed(1)}%\n                    </text>\n                </svg>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport Gauge from \"./Gauge.js\";\n\nexport default class CPUGrid extends React.Component {\n    createGrid = () => {\n        let grid = [];\n        for (let i = 0; i < Math.ceil(this.props.cpus.length / 4); i++) {\n            let row = [];\n            for (let j = 0; j < 4; j++) {\n                let index = i * 4 + j;\n                row.push(\n                    <div className=\"col-sm-3\">\n                        <Gauge\n                            cpu_num={index + 1}\n                            perc={this.props.cpus[index]}\n                        />\n                    </div>\n                );\n            }\n            grid.push(<div className=\"row mb-2\">{row}</div>);\n        }\n        return grid;\n    };\n\n    render() {\n        return <div className=\"container-fluid\">{this.createGrid()}</div>;\n    }\n}\n","export function memfmt(n) {\n    if (n >= 1e9) {\n        return (n / 1e9).toFixed(2) + \"G\";\n    } else if (n >= 1e6) {\n        return (n / 1e6).toFixed(2) + \"M\";\n    } else if (n >= 1000) {\n        return (n / 1000).toFixed(2) + \"K\";\n    }\n    return n.toFixed(2);\n}\n","import React from \"react\";\nimport \"./Meter.css\";\n\nimport { memfmt } from \"./Utility.js\";\n\nexport default class Meter extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-1\">\n                            <div className=\"meter-text\">{this.props.label}</div>\n                        </div>\n                        <div className=\"col-9\">\n                            <div className=\"meter-capacity\">\n                                <div\n                                    className={\n                                        \"meter-utilized \" +\n                                        (this.props.className || \"\")\n                                    }\n                                    style={{\n                                        width: this.props.perc + \"%\"\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        <div\n                            className=\"col-2\"\n                            style={{ \"text-align\": \"right\" }}\n                        >\n                            <div className=\"meter-text\">\n                                {memfmt(this.props.utilized)} /{\" \"}\n                                {memfmt(this.props.capacity)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-dark.css\";\n\nimport { memfmt } from \"./Utility.js\";\n\nexport default class ProcessList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gridOptions: {\n                getRowNodeId: data => data.pid,\n                defaultColDef: {\n                    filter: true,\n                    sortable: true\n                }\n            },\n            columnDefs: [\n                {\n                    headerName: \"PID\",\n                    field: \"pid\",\n                    filter: \"agNumberColumnFilter\",\n                    maxWidth: 80\n                },\n                { headerName: \"User\", field: \"username\", maxWidth: 100 },\n                {\n                    headerName: \"NI\",\n                    field: \"nice\",\n                    filter: \"agNumberColumnFilter\",\n                    maxWidth: 60\n                },\n                {\n                    headerName: \"RSS\",\n                    valueGetter: params => params.data.memory_info[0],\n                    valueFormatter: params => memfmt(params.value),\n                    filter: \"agNumberColumnFilter\",\n                    cellStyle: { textAlign: \"right\" },\n                    maxWidth: 80\n                },\n                {\n                    headerName: \"VMS\",\n                    valueGetter: params => params.data.memory_info[1],\n                    valueFormatter: params => memfmt(params.value),\n                    filter: \"agNumberColumnFilter\",\n                    cellStyle: { textAlign: \"right\" },\n                    maxWidth: 80\n                },\n                {\n                    headerName: \"SHR\",\n                    valueGetter: params => params.data.memory_info[2],\n                    valueFormatter: params => memfmt(params.value),\n                    filter: \"agNumberColumnFilter\",\n                    cellStyle: { textAlign: \"right\" },\n                    maxWidth: 80\n                },\n                { headerName: \"Status\", field: \"status\", maxWidth: 80 },\n                {\n                    headerName: \"CPU%\",\n                    field: \"cpu_percent\",\n                    cellStyle: { textAlign: \"right\" },\n                    filter: \"agNumberColumnFilter\",\n                    maxWidth: 110\n                },\n                {\n                    headerName: \"MEM%\",\n                    field: \"memory_percent\",\n                    cellStyle: { textAlign: \"right\" },\n                    filter: \"agNumberColumnFilter\",\n                    maxWidth: 110\n                },\n                { headerName: \"Time+\", field: \"time\", maxWidth: 80 },\n                { headerName: \"Command\", field: \"cmdline\" }\n            ]\n        };\n    }\n\n    componentDidUpdate() {\n        if (this.gridApi) {\n            this.gridApi.updateRowData({\n                add: this.props.add,\n                update: this.props.update,\n                remove: this.props.remove\n            });\n            this.gridApi.sizeColumnsToFit();\n        }\n    }\n\n    onGridReady(params) {\n        this.gridApi = params.api;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"ag-theme-dark\"\n                style={{ width: \"100%\", height: \"100%\" }}\n            >\n                <AgGridReact\n                    onGridReady={this.onGridReady.bind(this)}\n                    gridOptions={this.state.gridOptions}\n                    columnDefs={this.state.columnDefs}\n                />\n            </div>\n        );\n    }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport React from \"react\";\n\nimport CPUGrid from \"./CPUGrid.js\";\nimport Meter from \"./Meter.js\";\nimport ProcessList from \"./ProcessList.js\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cpus: [],\n            mem: { used: 0, total: 0, perc: 0 },\n            swp: { used: 0, total: 0, perc: 0 },\n            add: [],\n            update: [],\n            remove: []\n        };\n    }\n\n    componentDidMount() {\n        let ws = new WebSocket(\"ws://\" + window.location.hostname + \":5678\");\n        ws.onmessage = event => {\n            let data = JSON.parse(event.data);\n\n            this.setState({\n                cpus: data.cpu,\n                mem: data.mem,\n                swp: data.swp,\n                add: data.add,\n                update: data.update,\n                remove: data.remove\n            });\n        };\n    }\n\n    render() {\n        return (\n            <div id=\"app-container\">\n                <div>\n                    <CPUGrid cpus={this.state.cpus} />\n                </div>\n                <div className=\"mx-auto w-75 mt-5\">\n                    <Meter\n                        label=\"mem\"\n                        className=\"standard\"\n                        utilized={this.state.mem.used}\n                        capacity={this.state.mem.total}\n                        perc={this.state.mem.perc}\n                    />\n                </div>\n                <div className=\"mx-auto w-75 mt-3\">\n                    <Meter\n                        label=\"swp\"\n                        className=\"warning\"\n                        utilized={this.state.swp.used}\n                        capacity={this.state.swp.total}\n                        perc={this.state.swp.perc}\n                    />\n                </div>\n                <div id=\"proclist-container\" className=\"mt-4\">\n                    <ProcessList\n                        add={this.state.add}\n                        update={this.state.update}\n                        remove={this.state.remove}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}